
import java.util.*;

// User class
class User {
    private String username;
    private String password;
    private String profileInfo;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.profileInfo = "";
    }

    public String getUsername() {
        return username;
    }

    public boolean checkPassword(String password) {
        return this.password.equals(password);
    }

    public void updateProfile(String newInfo) {
        this.profileInfo = newInfo;
        System.out.println("Profile updated successfully.");
    }

    public void updatePassword(String oldPassword, String newPassword) {
        if (checkPassword(oldPassword)) {
            this.password = newPassword;
            System.out.println("Password updated successfully.");
        } else {
            System.out.println("Old password is incorrect.");
        }
    }

    public void displayProfile() {
        System.out.println("Username: " + username);
        System.out.println("Profile Info: " + profileInfo);
    }
}

// Question class
class Question {
    private String question;
    private String[] options;
    private int correctAnswer; // Index of the correct answer

    public Question(String question, String[] options, int correctAnswer) {
        this.question = question;
        this.options = options;
        this.correctAnswer = correctAnswer;
    }

    public void displayQuestion() {
        System.out.println(question);
        for (int i = 0; i < options.length; i++) {
            System.out.println((i + 1) + ". " + options[i]);
        }
    }

    public boolean checkAnswer(int answer) {
        return correctAnswer == answer;
    }
}

// MCQTest class
class MCQTest {
    private List<Question> questions;
    private int[] userAnswers;
    private int currentQuestionIndex;
    private int score;
    private Timer timer;

    public MCQTest(List<Question> questions, int timeLimitInSeconds) {
        this.questions = questions;
        this.userAnswers = new int[questions.size()];
        this.currentQuestionIndex = 0;
        this.score = 0;

        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                autoSubmit();
            }
        }, timeLimitInSeconds * 1000);
    }

    public void displayCurrentQuestion() {
        if (currentQuestionIndex < questions.size()) {
            questions.get(currentQuestionIndex).displayQuestion();
        } else {
            System.out.println("No more questions.");
        }
    }

    public void selectAnswer(int answer) {
        userAnswers[currentQuestionIndex] = answer;
        currentQuestionIndex++;
    }

    private void autoSubmit() {
        System.out.println("Time's up! Auto-submitting your answers.");
        calculateScore();
        displayScore();
        timer.cancel();
    }

    private void calculateScore() {
        for (int i = 0; i < questions.size(); i++) {
            if (questions.get(i).checkAnswer(userAnswers[i])) {
                score++;
            }
        }
    }

    public void displayScore() {
        System.out.println("Your score: " + score + "/" + questions.size());
    }
}

// Session class
class Session {
    private Map<String, User> users;
    private User currentUser;

    public Session() {
        users = new HashMap<>();
        // Adding a sample user
        users.put("user1", new User("user1", "password1"));
    }

    public boolean login(String username, String password) {
        if (users.containsKey(username) && users.get(username).checkPassword(password)) {
            currentUser = users.get(username);
            System.out.println("Login successful. Welcome, " + username + "!");
            return true;
        } else {
            System.out.println("Invalid username or password.");
            return false;
        }
    }

    public void logout() {
        currentUser = null;
        System.out.println("Logged out successfully.");
    }

    public User getCurrentUser() {
        return currentUser;
    }
}

// Main class
public class GuessTheNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Session session = new Session();

        // Login
        System.out.print("Enter username: ");
        String username = scanner.next();
        System.out.print("Enter password: ");
        String password = scanner.next();

        if (!session.login(username, password)) {
            return;
        }

        User user = session.getCurrentUser();

        // Update profile and password
        user.displayProfile();
        System.out.print("Do you want to update your profile? (yes/no): ");
        if (scanner.next().equalsIgnoreCase("yes")) {
            System.out.print("Enter new profile info: ");
            scanner.nextLine(); // consume the newline
            String newInfo = scanner.nextLine();
            user.updateProfile(newInfo);
        }

        System.out.print("Do you want to change your password? (yes/no): ");
        if (scanner.next().equalsIgnoreCase("yes")) {
            System.out.print("Enter old password: ");
            String oldPassword = scanner.next();
            System.out.print("Enter new password: ");
            String newPassword = scanner.next();
            user.updatePassword(oldPassword, newPassword);
        }

        // MCQ Test
        Question q1 = new Question("What is 2+2?", new String[]{"3", "4", "5"}, 2);
        Question q2 = new Question("What is the capital of France?", new String[]{"Berlin", "London", "Paris"}, 3);
        Question q3 = new Question("What is the color of the sky?", new String[]{"Blue", "Green", "Red"}, 1);
        MCQTest mcqTest = new MCQTest(Arrays.asList(q1, q2, q3), 30); // 30 seconds for the test

        while (true) {
            mcqTest.displayCurrentQuestion();
            System.out.print("Select your answer (1-3) or type -1 to submit: ");
            int answer = scanner.nextInt();
            if (answer == -1) {
                break;
            }
            mcqTest.selectAnswer(answer - 1); // Convert to zero-based index
        }

        mcqTest.displayScore();

        // Logout
        session.logout();
    }
}
